<?php
/**
 * InternalTransfer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LAB contrôle API swagger
 *
 * API LAB contrôle des virements et prélèvements
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use \Swagger\Server\ObjectSerializer;

/**
 * InternalTransfer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Server
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InternalTransfer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InternalTransfer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'creditor' => '\Swagger\Server\Model\CounterPart',
        'debtor' => '\Swagger\Server\Model\CounterPart',
        'efs_code_psp' => 'string',
        'end_to_end_id' => 'string',
        'external_transfer_id' => 'string',
        'remittance_information' => 'string',
        'transfer_category' => 'string',
        'transfer_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'creditor' => null,
        'debtor' => null,
        'efs_code_psp' => null,
        'end_to_end_id' => null,
        'external_transfer_id' => null,
        'remittance_information' => null,
        'transfer_category' => null,
        'transfer_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'creditor' => 'creditor',
        'debtor' => 'debtor',
        'efs_code_psp' => 'efsCodePSP',
        'end_to_end_id' => 'endToEndId',
        'external_transfer_id' => 'externalTransferId',
        'remittance_information' => 'remittanceInformation',
        'transfer_category' => 'transferCategory',
        'transfer_type' => 'transferType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'creditor' => 'setCreditor',
        'debtor' => 'setDebtor',
        'efs_code_psp' => 'setEfsCodePsp',
        'end_to_end_id' => 'setEndToEndId',
        'external_transfer_id' => 'setExternalTransferId',
        'remittance_information' => 'setRemittanceInformation',
        'transfer_category' => 'setTransferCategory',
        'transfer_type' => 'setTransferType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'creditor' => 'getCreditor',
        'debtor' => 'getDebtor',
        'efs_code_psp' => 'getEfsCodePsp',
        'end_to_end_id' => 'getEndToEndId',
        'external_transfer_id' => 'getExternalTransferId',
        'remittance_information' => 'getRemittanceInformation',
        'transfer_category' => 'getTransferCategory',
        'transfer_type' => 'getTransferType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creditor'] = isset($data['creditor']) ? $data['creditor'] : null;
        $this->container['debtor'] = isset($data['debtor']) ? $data['debtor'] : null;
        $this->container['efs_code_psp'] = isset($data['efs_code_psp']) ? $data['efs_code_psp'] : null;
        $this->container['end_to_end_id'] = isset($data['end_to_end_id']) ? $data['end_to_end_id'] : null;
        $this->container['external_transfer_id'] = isset($data['external_transfer_id']) ? $data['external_transfer_id'] : null;
        $this->container['remittance_information'] = isset($data['remittance_information']) ? $data['remittance_information'] : null;
        $this->container['transfer_category'] = isset($data['transfer_category']) ? $data['transfer_category'] : null;
        $this->container['transfer_type'] = isset($data['transfer_type']) ? $data['transfer_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creditor
     *
     * @return \Swagger\Server\Model\CounterPart
     */
    public function getCreditor()
    {
        return $this->container['creditor'];
    }

    /**
     * Sets creditor
     *
     * @param \Swagger\Server\Model\CounterPart $creditor creditor
     *
     * @return $this
     */
    public function setCreditor($creditor)
    {
        $this->container['creditor'] = $creditor;

        return $this;
    }

    /**
     * Gets debtor
     *
     * @return \Swagger\Server\Model\CounterPart
     */
    public function getDebtor()
    {
        return $this->container['debtor'];
    }

    /**
     * Sets debtor
     *
     * @param \Swagger\Server\Model\CounterPart $debtor debtor
     *
     * @return $this
     */
    public function setDebtor($debtor)
    {
        $this->container['debtor'] = $debtor;

        return $this;
    }

    /**
     * Gets efs_code_psp
     *
     * @return string
     */
    public function getEfsCodePsp()
    {
        return $this->container['efs_code_psp'];
    }

    /**
     * Sets efs_code_psp
     *
     * @param string $efs_code_psp efs_code_psp
     *
     * @return $this
     */
    public function setEfsCodePsp($efs_code_psp)
    {
        $this->container['efs_code_psp'] = $efs_code_psp;

        return $this;
    }

    /**
     * Gets end_to_end_id
     *
     * @return string
     */
    public function getEndToEndId()
    {
        return $this->container['end_to_end_id'];
    }

    /**
     * Sets end_to_end_id
     *
     * @param string $end_to_end_id end_to_end_id
     *
     * @return $this
     */
    public function setEndToEndId($end_to_end_id)
    {
        $this->container['end_to_end_id'] = $end_to_end_id;

        return $this;
    }

    /**
     * Gets external_transfer_id
     *
     * @return string
     */
    public function getExternalTransferId()
    {
        return $this->container['external_transfer_id'];
    }

    /**
     * Sets external_transfer_id
     *
     * @param string $external_transfer_id external_transfer_id
     *
     * @return $this
     */
    public function setExternalTransferId($external_transfer_id)
    {
        $this->container['external_transfer_id'] = $external_transfer_id;

        return $this;
    }

    /**
     * Gets remittance_information
     *
     * @return string
     */
    public function getRemittanceInformation()
    {
        return $this->container['remittance_information'];
    }

    /**
     * Sets remittance_information
     *
     * @param string $remittance_information remittance_information
     *
     * @return $this
     */
    public function setRemittanceInformation($remittance_information)
    {
        $this->container['remittance_information'] = $remittance_information;

        return $this;
    }

    /**
     * Gets transfer_category
     *
     * @return string
     */
    public function getTransferCategory()
    {
        return $this->container['transfer_category'];
    }

    /**
     * Sets transfer_category
     *
     * @param string $transfer_category transfer_category
     *
     * @return $this
     */
    public function setTransferCategory($transfer_category)
    {
        $this->container['transfer_category'] = $transfer_category;

        return $this;
    }

    /**
     * Gets transfer_type
     *
     * @return string
     */
    public function getTransferType()
    {
        return $this->container['transfer_type'];
    }

    /**
     * Sets transfer_type
     *
     * @param string $transfer_type transfer_type
     *
     * @return $this
     */
    public function setTransferType($transfer_type)
    {
        $this->container['transfer_type'] = $transfer_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


